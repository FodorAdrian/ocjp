Exam watch
===============================================================================

-------------------------------------------------------------------------------
WSKAZÓWKI DO EGZAMINU
-------------------------------------------------------------------------------

I) Wielu doświadczonych egzaminowanych nie wraca do pytań, na które udzielili 
   odpowiedź. Rób tak tylko w przypadku, gdy czujesz, że źle zrozumiałeś 
   pytanie, lub gdy źle je zinterpretowałeś za pierwszym razem. Nerwowość może
   prowadzić do pogorszenia odpowiedzi.
   
II) Widząc w zadaniu kod, którego numery linii zaczynają się od 1, masz do 
   czynienia z pełnym kodem źródłowym. Jeśli numery linii zaczynają się dalej
   niż od 1, załóż, że początek kodu, którego nie widać, jest poprawny (np.
   importy się zgadzają).
   
IV) Jeśli utkniesz na pytaniu wielokrotnego wyboru, użyj kartki/tablicy, aby
   spisać 2-3 najmocniejsze odpowiedzi i podkreśl tę, która wydaje się 
   najbardziej poprawna. Po pierwszym przebiegu testu taka notatka może 
   wyglądać np. tak:
   	21._B_ lub C 
   	33. A lub _C_
   	
   Jest to przydatne, gdy oznaczasz zadania i kontynuujesz. Możesz później
   wrócić do takiego zadania i od razu kontunuować proces myślowy, który
   porzuciłeś przy tym pytaniu. Technika ta pozwala na kontynuowanie zadania
   bez zbędnego przypominania sobie szczegółów zadania/procesu myślowego.
   Kartka papieru przyda się także przy wizualizacji zadań opisanych tekstem,
   aby je lepiej zrozumieć.      	
   	
V) Nie ma kar za złe odpowiedzi, zawsze warto zaznaczyć coś niż nic.

VI) Dobra strategia na rozwiązywanie testu:
 
	1. Przejdź szybko przez wszystkie zadania i odpowiedz na pytania,
	   co do których masz pewność i odpowiedź szybko przychodzi do głowy.
	   Czytaj pobieżnie treści zadań, rozpoznając typ i przedmiot zadania.

	   Jeśli nie jesteś przekonany co do odpowiedzi, zaznacz tą, która
	   na pierwszy rzut oka jest dobra i oznacz (Mark) pytanie do 
	   przejrzenia na potem.	   
	   
   	   Spróbuj spędzić na ten cykl mniej niż 25% czasu testu.
	   
	2. Przejdź przez wszystkie zadania jeszcze raz. Z poprzedniej fazy
	   wiesz już, na ile skomplikowany jest test i ile mniej więcej
	   czasu potrzebujesz średnio na każde zadanie. Spróbuj ustalić
	   kamienie milowe, np. "muszę rozwiązań 10 pytań co każde 15 minut".
	   W tej fazie lepiej omijać czasochłonne pytania i oznaczać je
	   na później.
	   	   
   	   Spróbuj skończyć ten cykl w momencie 50-60% czasu testu.
	
	3. W trzeciej fazie wróć do pytań, które oznaczyłeś do przejrzenia.
	   Faza ta obejmuje ponowny wgląd na zadania, co do których nie miałeś
	   pewności w dwóch poprzednich fazach i rozwiązywanie zadań 
	   czasochłnnych. Ciocaj je, do póki nie zrobisz wszystkich.
	   
	   Na koniec tego etapu powinieneś mieć odpowiedzi na wszystkie
	   pytania. Jeśli w kolejnej fazie zabraknie ci czasu, przynajmniej
	   na każde pytanie masz jakąś odpowiedź. 
	   
	   Dobrze, jeśli kończąc ten etap, zostanie ci jeszcze 10-20% czasu 
	   testu. 
	   
	4. Ostatni etap, gdy zrobisz wszystkie zadania - sprawdzenie 
	   odpowiedzi. Zrób jeszcze jeden przebieg przez wszystkie pytania,
	   pobieżnie analizując pytanie i udzieloną odpowiedź. Ostrożnie
	   analizuj zadania, aby sprawdzić, czy nie ma jakiegoś haczyka.
	   Szczególnie uważaj na pytanie, których jedną z odpowiedzi jest
	   "Błąd kompilacji". Możesz jeszcze odnaleźć ukryte błędy w zadaniu,
	   to jest twoja ostatnia szansa na poprawienie odpowiedzi.
	   
    Korzyścią z takiego podejścia jest to, że nawet pobieżne rozwiązywanie 
    zadań odświeża pamięć i może pomóc w rozwiązaniu zadań, które wcześniej 
    opuściliśmy.

VII) Ostrożnie analizuj kod źródłowy. Jeśli jedną z odpowiedzi jest "Błąd 
    kompilacji", najpierw dokładnie sprawdź składnię kodu, czy nie brakuje
    nawiasów okrądłych, średników, nawiasów wąsiastych (otwierających
    i zamykających w poprawnej kolejności), zwracaj uwagę na wielkość liter.
    
    Dopiero gdy kod się kompiluje, szukaj ewentualnych wyjątków, o ile jedną
    z odpowiedzi jest "Wyrzucenie wyjątku".
    
    Gdy upewnisz się, że nie ma błędu kompilacji ani nie są wyrzucane wyjątki,
    wtedy dopiero analizuj dogłębnie logikę kodu, np. przebiegi pętli i wartości
    zmiennych.
    
VIII) Przed egzaminem sprawdź, czy ośrodek certyfikujący należycie wyposaży cię
    w potrzebne akcesoria: kartki i długopis albo odpowiednio duża tablica
    i ścieralne mazaki.
   	
-------------------------------------------------------------------------------
TABLICE I ARRAYLIST
-------------------------------------------------------------------------------

1) Uważaj na liczbę obiektów przy konstrukcji tablic - 
   instrukcja:
		Object[] x = new Object[5];
   tworzy jeden obiekt na stosie - jest to obiekt tablicy, której elementy
   inicjalizowane są wartościami null
   
2) Widząc określenia takie jak "skonstruuj" ("construct"), "utwórz"
   ("create"), "stwórz instancję" ("instantiate") wiedz, że oznaczają one
   "obiekt tworzony jest na STERCIE". Stąd wiadomo, że konstruktor
   obiektu jest uruchamiany (i konstruktory nadklas).
   
3) Zwracaj uwagę na kod, który próbuje użyć niedozwolonego indeksu 
   tablicy. Indeks ujemny lub przekraczający indeks ostatniego
   elementu jest niedozwolony i spowoduje wyrzucenie wyjątku
   w czasie wykonania ArrayIndexOutOfBoundsException.
   
4) Pamiętaj, że nie wolno specyfikować rozmiaru tablicy przy stosowaniu
   składni tworzenia tablic anonimowych. Rozmiar jest dedukowany z liczby
   elementów rozdzielonych przecinkiem. Następujący kod jest błędny:
		int[] x = new int[2]{1, 2};  // ŹLE!
   Powinno być:	
		int[] x = new int[]{1, 2};  // OK
		
5) Pamiętaj, że przypisując tablicę obiektów zmiennej referencyjnej,
   możesz przypisać tablicę o typie tej zmiennej lub tablicę obiektów
   podtypu tej zmiennej, ale nie na odwrót. Przykład:
   class A{}
   class B extends A{}
   ...
   A[] a;
   B[] b;
   a = new B[5]; // OK
   b = new A[5]; // ŹLE!
		
6) ArrayList przechowuje referencje do obiektów. Jeśli zauważysz
   instrukcje w rodzaju: myArrayList.add(5), w rzeczywistości
   liczba 5 jest opakowywana (autoboxing) w typ Integer i obiekt
   tej klasy jest przekazywany do metody add.
   
-------------------------------------------------------------------------------
INSTRUKCJE STERUJĄCE
-------------------------------------------------------------------------------

7) Uważaj na instrukcję przypisania w wyrażeniu warunkowym instrukcji if,
   np.
		boolean boo = false;
		if (boo = true) {
			...
		}
   albo:
		if (boo =! false) {
			...
		}
   W pierwszym przypadku warunek będzie zawsze prawdziwy, bo wyrażenie
   przyjmie wartość zmiennej boo, której przypisujemy wartość true.
   NIE jest to instrukcja sprawdzająca!
   Drugi przypadek może do złudzenia przypominać operator "rożne od" -
   !=, ale w rzeczywistości jest to przypisanie !false, czyli true -
   więc warunek zawsze będzie prawdziwy.
   Pamiętaj też, że liczby całkowite nie mogą być wyrażeniem 
   warunkowym, więc poniższe instrukcje są błędne:
		int x = 1;			// ŹLE
		if (x) ...			// ŹLE
		if (x = 1) ...		// ŹLE
		if (
	
8) Uważaj na naruszenia składni instrukcji switch-case:
	switch(x) {
		case 0 {		// ŹLE - brak dwukropka po "case 0"
			y = 7;
		}
	}
	switch (x) {
		0: {}			// ŹLE - brak słowa kluczowego "case"
		1: {}
	}
	
9) Pamiętaj, że "default" w instrukcji switch może znaleźć się 
   w dowolnym miejscu między etykietami "case", wcale nie musi być
   na końcu! Np.:
	switch(x) {
		case 0: {}
		default: {}
		case 1: {}
	}
   Po prostu pamiętaj, że default rządzi się takimi samymi regułami jak
   etykiety case, z tym, że nie jest powiązane ze stałą.
   
10) Podobnie jak przy instrukcji if, uważaj na wyrażenia warunkowe w pętlach,
   np.:
	int x = 1;
	while (x) {}  		// ŹLE
	while (x = 1) {} 	// ŹLE
	while (x == 1) {}	// OK
	while (true) {}		// OK
	while (false) {}	// ŹLE: error: unreachable statement

11) Uważaj na zakres zmiennych lokalnych. Ma to duże znaczenie na egzaminie.
    Pamiętaj, że zmienna zadeklarowana w kroku inicjalizacji pętli for nie
    jest widoczna poza blokiem pętli for, ale możesz użyć zmiennej zdefinio-
    wanej wcześniej:
	int x = 3;
	for (x = 0; x < 20; x++) {}
	System.out.println(x);			// OK
	for (int i = 0; i < 0; i++) {}
	System.out.println(i);			// ŹLE - zmienna i już nie istnieje
	
12) Wiele pytać na egzaminie ma w liście odpowiedzi "Compilation fails" albo
    "An exception occurs on runtime". Dokładnie sprawdź najpierw, czy kod
    się skompiluje, następnie czy nie wystąpi wyjątek w czasie wykonania.
    Dopiero wtedy analizuj logikę kodu.
	
13) Pamiętaj, że instrukcja continue musi być w środku PĘTLI, inaczej
    dostaniesz błąd kompilacji. Instrukcja break może być użyta w pętli
    lub w instrukcji switch.
    Brak i continue z etykietami muszą znajdować się w pętli, która oznaczona
    jest taką samą etykietą.

-------------------------------------------------------------------------------
WYJĄTKI
-------------------------------------------------------------------------------

14) Nie wolno używać klauzuli try jednocześnie bez klauzul catch i finally. 
    Sama klauzula try spowoduje błąd kompilacji. Każda klauzula catch musi 
    znajdować się bezpośrednio po bloku try. Klauzula finally musi znajdować
    się bezpośrednio po ostatnim bloku catch (lub po bloku try, jeśli nie ma żadnej
    klauzuli catch). Można pominąć klauzulę catch albo finally, ale nie obie naraz.
    
15) Możesz propagować wyjątek w dół stosu wywołań metod. A co jeżeli wyjątek 
    dojdzie do metody main()? Możesz wyrzucić wyjątek również z metody main().
    Powoduje to zatrzymanie JVM i wypisanie stack-trace'u na wyjściu.
    
16) Do egzaminu nie musisz znać żadnej metody w klasie Throwable, włączając do 
    tego Exception i Error. Musisz natomiast wiedzieć to, że każdy z typów
    Exception, RuntimeException, Error i Throwable może być wyrzucony z użyciem
    klauzuli throw i może być złapany (chociaż żadko będzie łapał cokolwiek 
    innego niż podtyp klasy Exception).
    
17) Zwróć uwagę na poniższy kod, w którym metoda wołająca nie obsługuje ani nie
    deklaruje wyrzuconego wyjątku sprawdzanego:
    
	void doStuff() { doMore(); }
	void doMore() { throw new IOException(); }  // ŹLE
	 
    Metoda doMore() wyrzuca sprawdzany wyjątek, którego nie deklaruje! Taki kod
    się nie skompiluje. Ale jeśli dodamy deklarację do metody doMore:
    
	void doMore() throws IOException { throw new IOException(); }  // OK

    W dalszym ciągu metoda doStuff jest niepoprawna, ponieważ nie łapie ani
    nie deklaruje wyjątku. Możemy zatem albo propagować wyjątek w dół stosu 
    wywołań:
    	
	void doStuff() throws IOException { doMore(); }
    	 
    albo obsłużyć wyjątek, np. tak:
    
	void doStuff() { 
		try {
			doMore();
		} catch(IOException e) {
			e.printStackTrace();	
		}
	}
	
18) Kiedy obiekt podtypu Exception jest wyrzucany (z typem Exception włącznie), 
    musi zostać obsłużony albo zadeklarowany. Takie wyjątki są nazywane wyjątkami
    sprawdzanymi i zawierają wszystkie wyjątki oprócz podklas RuntimeException
    (z klasą RuntimeException włącznie), które z kolei są niesprawdzane.
    
    Bądź gotowy na kod, w którym reguła "obsłuż albo zadeklaruj" nie jest 
    spełniona, np.:
	
	class MyException extends Exception {
		void someMethod() { 
			doStuff(); 
		}		
		void doStuff() throws MyException {
			try {
				throw new MyException();
			} catch (MyException me) {
				throw me;
			}
		}
	}
	
    Musisz umieć rozpoznać tutaj błąd kompilacji: metoda someMethod() nie 
    obsługuje ani nie deklaruje wyjątku MyException, który jest sprawdzany.
 
-------------------------------------------------------------------------------
STRING i STRINGBUILDER
-------------------------------------------------------------------------------

19) Pamiętaj, że klasa String ma metodę length(), która podaje liczbę znaków
    (długość stringa), natomiast tablice obiektów mają stałą length, która
    określa ilość elementów w tablicy. Uważaj więc na poniższy kod:
    
    String x = "test";
    // int N = x.length;	// BŁĄD
    int N = x.length();		// OK
    
    String[] xA = {"test"};
    // int N = xA.length();	// BŁĄD
    int N = xA.length;		// OK

20) Obiekty StringBuilder mają swoją pojemność - capacity, która określa ile
    znaków może pomieścić się w obiekcie.
    Są trzy sposoby na utworzenie obiektu StringBuilder:
    
	1) new StringBuilder();		// domyśle capacity = 16 znaków
	2) new StringBuilder("ab");	// capacity = 16 znaków + "ab".length = 18
	3) new StringBuilder(x);	// capacity = x znaków (int)
	
    Najczęściej przy pracy ze StringBuilderem używa się metod append()
    i insert(). Są trzy reguły do zapamiętania przy pracy ze StringBuilderem:
    
    	*) jeśli po użyciu instrukcji append() napis przekroczy pojemność,
    	   zostanie ona automatycznie zwiększona
    	*) jeśli insert() wstawia napis o indeksie mieszczącym się w pojemności,
    	   ale napis ostateczny przekracza pojemność obiektu, zostanie ona
    	   zwiększona automatycznie
    	*) jeśli insert() próbuje wstawić napis o indeksie przekraczającym
    	   bieżącą długość napisu w obiekcie, zostanie wyrzucony wyjątek
    	   StringIndexOutOfBoundsException.

21) Na egzaminie będziesz sprawdzany z wiedzy nt. różnic między obiektami 
    klasy String i StringBuilder. Ponieważ obiekty StringBuilder można
    zmieniać, tj. w odróżnieniu do obiektów String są mutowalne, poniższy
    kod zadziała inaczej niż analogiczny dla klasy String:
    
	StringBuilder sb = new StringBuilder("abc");
	sb.append("def");
	System.out.println(sb); // wypisze "abcdef"
	
22) Sporo zadań na egzaminie używa składni zwanej "łancuchem metod". 
    Przykład:

	result = method1().method2().method3();
	
    Teoretycznie, dowolna ilość metod może być wywołana tym sposobem,
    chociaż w praktyce raczej nie zobaczysz więcej niż trzy wywołania.
    Oto jak należy rozszyfrować tę notację:
    
    	1. Określ, co zwraca wywołanie pierwsze z lewej (nazwijmy 
    	   tę wartość "x").
    	2. Użyj "x" jako obiektu, na którym wykonasz drugie z lewej 
    	   wywołanie metody. Jeśli są tylko dwa wywołania, rezultat
    	   drugiego stanie się wartością wyrażenia (result).
    	3. Jeśli jest trzecie wywołanie metody, rezultat drugiego
    	   wywołania użyj jako obiekt, na którym wykonasz trzecie
    	   wywołanie. Rezultat trzeciego wywołania staje się wartością
    	   wyrażenia, itd.

-------------------------------------------------------------------------------
DEFINIOWANIE KLAS
-------------------------------------------------------------------------------

23) Możesz używać znaku gwiazdki '*' (wildcard), aby zrealizować proste 
    wyszukiwanie w pakietach lub klasach używając instrukcji 'import' lub
    'import static'. Jeśli chcesz przeszukać pakiet java.util w poszukiwaniu
    klas, możesz napisać:`
    
    Ale nie możesz przeszukiwać szerzej. np. NIE MOŻESZ użyć instrukcji import
    aby przeszukać całe Java API np. w następujący sposób:
    
	import java.*;	// ŹLE - skompiluje się, ale nie zadziała w oczekiwany
	                // sposób!

-------------------------------------------------------------------------------
UŻYWANIE INTERFEJSÓW
-------------------------------------------------------------------------------

24) Uważaj na stałe zdefiniowane w interfejsie. Każda deklaracja zmiennej
    w interfejsie to w rzeczywistości zdefiniowanie stałej, ponieważ w mocy są
    modyfikatory public, static i final domyślne dla każdej zmiennej 
    w interfejsie. Poniższe definicje są równoważne:
    
	int x = 1;
	public int x = 1;
	static int x = 1;
	final int x = 1;
	public static int x = 1;
	public final int x = 1;
	static final int x = 1;
	public static final int x = 1;  // ostateczna, domyślna wersja

-------------------------------------------------------------------------------
DEKLAROWANIE CZŁONKÓW KLAS
-------------------------------------------------------------------------------

25) Nie wolno nigdy umieszczać wielkości tablicy w jej deklaracji! Np. taki
    kod jest błędny:
    
	int[5] scores;	// BŁĄD!
	
    Nastąpi błąd kompilacji. Rozmiar jest bowiem ustalany dopiero przy 
    tworzeniu instancji tablicy.
    
-------------------------------------------------------------------------------
KAPSUŁKOWANIE
-------------------------------------------------------------------------------

26) Uważaj na pytania, w których jest pytanie o zachowanie programu, 
    a rzeczywistym problemem jest brak kapsułkowania. Spójrz na poniższy
    przykład:
    
    	class Foo {
    		public int left = 9;
    		public int right = 3;
    		public void setLeft(int leftNum) {
    			left = leftNum;
    			right = leftNum/3;
    		}
    		// tu dalej jakiś złożony kod
    	}
    	
    Teraz rozważ pytanie: czy wartość right zawsze będzie równa 1/3
    wartości left? Na pierwszy rzut oka tak, do póki nie zauważysz, że
    użytkownik klasy Foo nie musi użyć metody setLeft, aby zmienić wartość 
    zmiennej left! Zmienna left ma dostęp publiczny i klient klast może po 
    prostu przypisać jej jakąś wartość. 

-------------------------------------------------------------------------------
PRZESŁANIANIE/PRZECIĄŻANIE
-------------------------------------------------------------------------------

27) Jeśli metoda jest przesłonięta ale używasz polimorficznej referencji 
    wskazującej na obiekt podtypu z przesłoniętą metodą, kompilator zakłada, że
    wywołujesz wersję metody z nadklasy. Jeśli wersja z nadklasy deklaruje 
    wyjątek sprawdzany, a metoda przesłaniające nie deklaruje go, kompilator 
    wciąż myśli, że wywołujesz metodę, która deklaruje sprawdzany wyjątek.
    Spójrz na przykład:
	
	class A {
		void method() throws Exception {}
	}
	class B {
		void method() {} // usuwa wyjątek z deklaracji!
	}
	public class Test {
		public static void main(String[] args) {
			A a = new B();
			B b = new B();
			b.method();		// OK
			a.method();		// BŁĄD - wyjątek nieobsłużony!
		}
	}
	
    Kod ten się nie skompiluje z powodu wyjątku Exception zadeklarowanego 
    w metodzie method() w klasie A. Błąd występuje nawet wtedy, jeśli 
    dynamiczne wywoływana metoda z podklasy faktycznie nie deklaruje żadnego 
    wyjątku.

28) Uważaj, aby dobrze rozpoznać, kiedy metoda jest przesłonięta, a kiedy
    przeciążona. Możesz zobaczyć metodę, która zdaje się naruszać reguły 
    przesłaniania, a w rzeczywistości jest poprawną metodą przeciążoną, np.:
     
	public class Foo {
		public void doStuff(int y, String s) {}
		public void moreThings(int x) {}
	}
	class Bar extends Foo {
		public void doStuff(int y, Long s) throws IOException {}
	}
	
    Możesz mieć złudzenie, że rzucanie wyjątku IOException jest problemem, 
    ponieważ metoda w nadklasie nie deklaruje takiego wyjątku, ale metoda 
    doStuff() nie jest przesłonięta! Jest przeciążona, ponieważ ma inną listę 
    argumentów.
    
29) Pamiętaj, że możesz przeciążać metodę main():

	class DuoMain {
		public static void main(String[] args) {
			main(1);
		}
		static void main(int i) {
			System.out.println("overloaded main");
		}
	}

30) Nie daj się zwieść metodzie, która jest przeciążona, ale nie jest 
    przesłonięta w podklasie! Poprawny jest poniższy kod:

	class Foo {
		void doStuff() {}
	}
	class Bar extends Foo {
		void doStuff(String a) {}
	}

    Klasa Bar ma dwie metody o nazwie doStuff: bezargumentową wersję, którą
    dziedziczy z Foo (i nie przesłania) oraz przeciążoną, przyjmującą 
    argument typu String, zdefiniowaną w klasie Bar. Kod z referencją klasy
    Foo może wywołać tylko wersję bezargumentową (ponieważ tylko taka jest
    znana w czasie kompilacji), ale kod z referencją typu Bar ma dostęp do
    obu przeciążonych metod.

31) Uważaj na z pozoru skomplikowaną składnię rzutowania "na skróty". 
    Kod:

	Animal a = new Dog();	// Dog jest klasą pochodną klasy Animal
	Dog d = (Dog) a;
	d.doDogStuff();
	
    można zapisać jako:

	Animal a = new Dog();
	((Dog)a).doDogStuff();
	
    Wszystkie pary nawiasów są tu niezbędne dla kompilatora.

32) Zwracaj uwagę na niepoprawne użycie extends i implements. Poniższe 
    przykłady przedstawiają poprawne i niepoprawne deklaracje klas oraz
    interfejsów: 

	class Foo {}					// OK
	class Bar implements Foo {}			// BŁĄD
	interface Baz {}				// OK
	interface Fi {}					// OK
	interface Fee implements Baz {}			// BŁĄD
	interface Zee implements Foo {} 		// BŁĄD
	interface Zoo extends Foo {}			// BŁĄD
	interface Boo extends Fi {}			// OK
	class Toon extends Foo,Button {}		// BŁĄD
	class Zoom implements Fi, Baz			// OK
	interface Vroom extends Fi, Baz {}		// OK
	class Yow extends Foo implements Fi {}		// OK
	class Yow extends Foo implements Fi, Baz {}	// OK 

    Zanim zaczniesz zagłębiać się w logikę kodu, sprawdź, czy deklaracje
    klas i interfejsów są w ogóle poprawne!

33) Na egzaminie pamiętaj, że metody przeciążone mogą mieć dowolne typy 
    zwracane (muszą się różnić przynajmniej listą argumentów), ale metody
    przesłaniające mogą zmieniać typ tylko w zakresie typów kowariantnych
    z typem zwracanym w nadklasie.

34) Uważaj na metody, których typ zwracany to klasa abstrakcyjna lub 
    interfejs i pamiętaj, że każdy obiekt, który spełnia relację IS-A
    (tj. obiekt instanceof TypZwracany ma wartość true) może być zwrócony
    przez tą metodę. Np.:
    
	public abstract class Animal {}
	public class Bear extends Animal {}
	
	public class Test {
		public Animal go() {
			return new Bear();	// OK, Bear IS-A Animal
		}
	}
	
    Ten kod się kompiluje, a typ wartości zwracanej jest podtypem.

-------------------------------------------------------------------------------
KONTRUKTORY I TWORZENIE INSTANCJI KLAS
-------------------------------------------------------------------------------

35) Bloki inicjalizujące zazwyczaj znajdują się na górze klasy, ale nie zdziw 
    się, jeśli na egzaminie w zadaniu znajdziesz blok sprytnie ukryty w środku
    klasy, czający się gdzieś między metodami i zmiennymi instancji.

-------------------------------------------------------------------------------
ELEMENTY STATYCZNE
-------------------------------------------------------------------------------

36) Jednym z częstszych błędów jest próba dostępu do zmiennej instancji 
    z poziomu metody statycznej, np. main():
	
	class Foo {
		int x = 3;
		public static void main(String[] args) {
			System.out.println("x is " + x);  // ŹLE
		}
	}
	
    Ten kod się nie skompiluje, ponieważ nie możesz dostać się do niestatycznej
    zmiennej (instancji) z metody statycznej. Oczywiście na egzaminie ten 
    problem może być sprytnie ukryty w kodzie tak, aby odwrócić twoją uwagę.
    Przykład:
	
	class Foo {
		int x = 3;
		float y = 4.3f;
		public static void main(String[] args) {
			for (int z = x; z < ++x; z--, y = y+z) {
				// tutaj skomplikowana logika
			}
		}
	}
    
    Zanim skupisz się na logice kodu, sprawdź, czy metoda ma dostęp (czy 
    ją widzi) do zmiennej, która została w niej użyta. To samo tyczy się metod
    instancji.

-------------------------------------------------------------------------------
LITERAŁY, PRZYPISANIA I ZMIENNE
-------------------------------------------------------------------------------

37) Poprawna jest deklaracja wielu zmiennych w jednej linii:

	int a, b, c;
	
    Poprawne jest też zainicjalizowanie tych zmiennych:
    
	int j, k=1, l, m=3;
	
    Każda z tych zmiennych ewaluowana jest od lewej po prawej, tak, jak gdyby
    zadeklarować je w osobnych liniach:
    
	int j;
	int k=1;
	int l;
	int m=3;
	
    Ale kolejność jest istotna. To jest poprawne:
    
    	int j, k=1, l, m=k+3;
    	
    Ale to już nie jest:
    
	int j, k=m+3, l, m=1;	// ŹLE: m jest niezainicjalizowane przed 
				// użyciem w k
	int x, y = x+1, z;	// ŹLE: x jest niezainicjalizowane przed 
				// użyciem w y

38) Na egzaminie mogą pojawić się pytania, w których użyto obiektów 
    opakowujących, np.:
	
	Long x = new Long(42);
	Short y = new Short("57");
	
    Obiekt "wrapper" to obiekt, który trzyma wartość zmiennej prymitywnej. 
    Każdy typ prymitywny ma swój odpowiednik w postaci klasy opakowującej:
    Boolean, Byte, Character, Double, Float, Integer, Long i Short. 
    Drukowanie wrappera, np.:
    
    	System.out.println(x + " " + s);
    	
    Da w rezultacie:
    	42 57

-------------------------------------------------------------------------------
ZAKRES ZMIENNYCH
-------------------------------------------------------------------------------

39) Uważaj na błędy zakresu, gdy zmienna blokowa (tj. zadeklarowana 
    w bloku, np. w instrukcji switch, for, do itd.) używana jest poza 
    blokiem, gdzie nie jest widoczna.

-------------------------------------------------------------------------------
INICJALIZOWANIE ZMIENNYCH
-------------------------------------------------------------------------------

40) Zmienne automatyczne to inaczej zmienne lokalne - nie oznacza to, że 
    zmienne "automatycznie" otrzymują wartość domyślną! Jest wręcz na odwrót -
    zmienna automatyczna musi otrzymać wartość przed jej użyciem, inaczej
    kompilator zaprotestuje.

-------------------------------------------------------------------------------
OPERATORY
-------------------------------------------------------------------------------

41) Tych tematów nie ma na egzaminie: 
      - operatory przesuwania bitowego
      - operatory działające na bitach
      - dopełnienie do 2
      - dzielenie przez 0                                                                                                              

42) Używając operatora przypisania złożonego, pamiętaj, że wyrażenie na prawo
    od znaku równości ujmowane jest w nawiasy i obliczane jako pierwsze!
    Np. wyrażenie:
	x *= 2+5;
    nie zostanie wbrew pozorom potraktowane jako:
	x = (x * 2) + 5;
    tylko jako:
	x = x * (2 + 5);

43) Zwracaj uwagę na użycie operatora instanceof w zadaniach, w których
    zmienna sprawdzana jest pod kątem bycia instancją interfejsu podczas, gdy
    klasa tego obiektu implementuje go nie bezpośrednio. Pośrednia 
    implementacja występuje, gdy interfejs jest implementowany przez którąś
    nadklasę w hierarchii klasy, ale nie przez klasę sprawdzanego obiektu.
    Przykład:
	
	interface Foo {}
	class A implements Foo {}
	class B extends A {}
	...
	A a = new A();
	
	B b = new B();
    Dla powyższego, następujące wyrażenia są prawdziwe:
	
	a instanceof Foo
	a instanceof A
	b instanceof Foo	// implementacja pośrednia
	
    Mówimy, że obiekt jest typu danego interfejsu (jest instancją interfejsu)
    jeśli jego klasa, lub któraś nadklasa w hierarchii dziedziczenia 
    implementuje ten interfejs.
    
44) Pamiętaj, że każda tablica jest obiektem, nawet jeśli jest to tablica
    wartości prymitywnych. Jako obiekt, zawsze spełnia wyrażenie

	zmienna instanceof Object;

    o ile nie jest nullem. Więc uważaj np. na taki kod:
    
	int []nums = new int[3];
	if (nums instanceof Object) {}	// zawsze zwraca true
	
45) Operatory dzielenia i reszty z dzielenia w kontekście liczb całkowitych
    mają ciekawą relację:
      - operator modulo usuwa z liczby wszystko poza resztą z dzielenia
      - operator dzielenia usuwa resztę z dzielenia

46) Zrozum dobrze, jak działa konkatenacja stringów, ponieważ występuje prawie
    w każdym zadaniu. Np. możesz zobaczyć coś takiego:

	int b = 2;
	System.out.println("" + b + 3);

    Na wyjściu będzie:
	23
    Ale jeśli wyrażenie zamienimy na:

	System.out.println(b + 3);

    Wynikiem będzie:
	5

47) Zwracaj uwagę na kod, który próbuje zmienić wartość zmiennej oznaczonej
    jako final. Kod taki się nie skompiluje. Przykład:

	final int x = 5;
	int y = x++;

    Nie możesz stosować operatorów przypisania złożonego ani operatorów
    inkrementacji/dekrementacji na zmiennych finalnych! Kompilator tego
    nie przełknie. Jeśli więc dostrzeżesz tego typu manewry w treści zadania
    nie trać czasu na zagłębianie się w kod, bo on się nawet nie skompiluje.

48) Uproszczone operatory koniunkcji i alternatywny logicznej działają tylko
    na operandach typu boolean. Nie daj się więc nabrać na taki kod:

	if (5 && 6) {}

    Może to wyglądać na koniunkcję bitową, ale ten kod się nie skompiluje.

